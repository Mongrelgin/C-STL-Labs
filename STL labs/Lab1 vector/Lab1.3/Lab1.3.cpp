#include <iostream>
#include <vector>
using namespace std;
/*Напишите алгоритм сортировки (любой простейший) содержимого вектора целых чисел, используя для доступа к содержимому вектора только итераторы. 
Для работы с итераторами допустимо использовать только операторы получения текущего элемента и перехода к следующему 
(подсказка, можно сохранять копию итератора указывающего на некоторый элемент).*/
void FunkSort(vector <int>& v,vector <int>::iterator& iter);//Прототип функции сортировки

int main() {
	vector<int> v(5);//Объявляем вектор на 5 значений
	vector<int>::iterator iter;//Объявляем итератор
	iter = v.begin();//Итератор указывает на начало вектора v
	
	while (iter != v.end())//Пока итератор не прошёл последний элемент вектора v
	{
		*iter = rand();//Запись числа в вектор v на позицию указывающую итератору
		cout << *iter << '\n';//Вывод числа
		iter++;
	}
	cout << '\n';	
	FunkSort(v, iter);//Вызов функции сортировки
	while (iter != v.end())
	{
		cout << *iter << '\n';
		iter++;
	}	
}

void FunkSort(vector <int>& v,vector <int>::iterator& iter) {
	iter = v.begin();//Итератор указывает на начало вектора v
	while (iter != v.end())//Пока итератор не прошёл последний элемент вектора v
	{
		if (iter + 1 != v.end() && *iter > * (iter + 1))//Если следующий итератор не прошёл последний элемент вектора v и следующий элемент больше текущего
		{
			swap(*iter, *(iter + 1));//Меняем элементы вектора местами
			iter = v.begin();//Итератор указывает на начало вектора v
		}
		else iter++;
	}
	iter = v.begin();//Итератор указывает на начало вектора v
}